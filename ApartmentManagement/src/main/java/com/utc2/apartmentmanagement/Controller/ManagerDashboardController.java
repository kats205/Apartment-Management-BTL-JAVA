package com.utc2.apartmentmanagement.Controller;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.layout.Priority;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import com.utc2.apartmentmanagement.DAO.ApartmentDAO;
import com.utc2.apartmentmanagement.Model.Apartment;
import com.utc2.apartmentmanagement.Utils.TableUtils;

import java.text.DecimalFormat;
import java.util.List;

import static javafx.application.Application.launch;

public class ManagerDashboardController extends Application {
    @FXML
    private static StackPane contentPane;
    @Override
    public void start(Stage primaryStage) {
       TableView<Apartment> table = new TableView<>();

    TableColumn<Apartment, Integer> colApartmentId = new TableColumn<>("Apartment ID");
    colApartmentId.setCellValueFactory(new PropertyValueFactory<>("apartmentID"));
    colApartmentId.setPrefWidth(100);
    colApartmentId.setCellFactory(tc -> TableUtils.createCenteredCell());

    TableColumn<Apartment, Integer> colBuildingId = new TableColumn<>("Building ID");
    colBuildingId.setCellValueFactory(new PropertyValueFactory<>("buildingID"));
    colBuildingId.setPrefWidth(100);
    colBuildingId.setCellFactory(tc-> TableUtils.createCenteredCell());

    TableColumn<Apartment, String> colFloor = new TableColumn<>("Floor");
    colFloor.setCellValueFactory(new PropertyValueFactory<>("floors"));
    colFloor.setPrefWidth(100);
    colFloor.setCellFactory(tc-> TableUtils.createCenteredCell());

    TableColumn<Apartment, Double> colPrice = new TableColumn<>("Price ($)");
    colPrice.setCellValueFactory(new PropertyValueFactory<>("priceApartment"));
    colPrice.setPrefWidth(200);
    colPrice.setCellFactory(tc-> TableUtils.createCenteredCell());

        TableColumn<Apartment, Double> colArea = new TableColumn<>("Area (m¬≤)");
        colArea.setCellValueFactory(new PropertyValueFactory<>("area"));
        colArea.setPrefWidth(100);
        colArea.setCellFactory(tc-> TableUtils.createCenteredCell());

        TableColumn<Apartment, Integer> colBedrooms = new TableColumn<>("Bedrooms");
        colBedrooms.setCellValueFactory(new PropertyValueFactory<>("bedRoom"));
        colBedrooms.setPrefWidth(100);
        colBedrooms.setCellFactory(tc-> TableUtils.createCenteredCell());



        TableColumn<Apartment, String> colStatus = new TableColumn<>("Status");
        colStatus.setCellValueFactory(new PropertyValueFactory<>("status"));
        colStatus.setPrefWidth(100);
        colStatus.setCellFactory(tc-> TableUtils.createCenteredCell());


        TableColumn<Apartment, Double> colMaintenanceFee = new TableColumn<>("Maintenance Fee");
        colMaintenanceFee.setCellValueFactory(new PropertyValueFactory<>("maintanceFee"));
        colMaintenanceFee.setPrefWidth(200);
        colMaintenanceFee.setCellFactory(tc-> TableUtils.createCenteredCell());

        // ƒê·ªãnh d·∫°ng c·ªôt Price (t√°ch ri√™ng ƒë·ªÉ kh√¥ng b·ªã ·∫£nh h∆∞·ªüng b·ªüi v√≤ng l·∫∑p)
    colPrice.setCellFactory(column -> new TextFieldTableCell<Apartment, Double>() {
        private final DecimalFormat df = new DecimalFormat("#,##0"); // ƒê·ªãnh d·∫°ng s·ªë nguy√™n (kh√¥ng c√≥ E)
        @Override
        public void updateItem(Double item, boolean empty) {
            super.updateItem(item, empty);
            if (empty || item == null) {
                setText(null);
            } else {
                setText(df.format(item)); // Hi·ªÉn th·ªã s·ªë kh√¥ng c√≥ k√Ω hi·ªáu khoa h·ªçc
            }
        }
    });


    table.getColumns().addAll(colApartmentId, colBuildingId, colFloor, colPrice, colArea, colBedrooms, colStatus, colMaintenanceFee);

    // L·∫•y d·ªØ li·ªáu t·ª´ Database
    ObservableList<Apartment> apartmentList = FXCollections.observableArrayList();
    List<Apartment> apartmentList1 = new ApartmentDAO().getAllApartments();
    apartmentList.addAll(apartmentList1);
    table.setItems(apartmentList);

    VBox vbox = new VBox(table);
    VBox.setVgrow(table, Priority.ALWAYS);

    // Hi·ªÉn th·ªã giao di·ªán
    Scene scene = new Scene(vbox, 1080, 700);
    primaryStage.setScene(scene);
    primaryStage.setTitle("Apartment List from Database");
    primaryStage.show();
    }

    public void showResidents() {
        contentPane.getChildren().setAll(new Label("üë• Qu·∫£n l√Ω C∆∞ d√¢n"));
    }

    public void showStaff() {
        contentPane.getChildren().setAll(new Label("üëî Qu·∫£n l√Ω Nh√¢n vi√™n"));
    }

    public void showServices() {
        contentPane.getChildren().setAll(new Label("üõ† Qu·∫£n l√Ω D·ªãch v·ª•"));
    }

    public void showMaintenanceFees() {
        contentPane.getChildren().setAll(new Label("üí∞ Qu·∫£n l√Ω Ph√≠ b·∫£o tr√¨"));
    }

    public void showContracts() {
        contentPane.getChildren().setAll(new Label("üìú Qu·∫£n l√Ω H·ª£p ƒë·ªìng"));
    }

    public void showReports() {
        contentPane.getChildren().setAll(new Label("üìä B√°o c√°o"));
    }

    public void logout() {
        System.out.println("ƒêƒÉng xu·∫•t...");
        // Th√™m code ƒë·ªÉ quay l·∫°i m√†n h√¨nh ƒëƒÉng nh·∫≠p
    }

    public static void main(String[] args) {
        launch(args);
    }


}
