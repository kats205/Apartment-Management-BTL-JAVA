package com.utc2.apartmentmanagement.Controller;

import com.utc2.apartmentmanagement.DAO.ReportDAO;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.Node;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.MapValueFactory;

import java.net.URL;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.Map;
import java.util.ResourceBundle;

public class ReportViewController implements Initializable {

    @FXML
    private ComboBox<String> reportTypeComboBox;

    @FXML
    private DatePicker fromDatePicker;

    @FXML
    private DatePicker toDatePicker;

    @FXML
    private Button generateButton;

    @FXML
    private Button exportReportButton;

    @FXML
    private BarChart<String, Number> revenueChart;

    @FXML
    private PieChart statusChart;

    @FXML
    private TableView<Map<String, Object>> reportTable;

    @FXML
    private TableColumn<Map, String> periodColumn;

    @FXML
    private TableColumn<Map, Double> totalInvoicesColumn;

    @FXML
    private TableColumn<Map, Integer> paidInvoicesColumn;

    @FXML
    private TableColumn<Map, Integer> unpaidInvoicesColumn;

    @FXML
    private TableColumn<Map, Integer> overdueInvoicesColumn;

    @FXML
    private TableColumn<Map, Double> totalRevenueColumn;

    @FXML
    private TableColumn<Map, Double> totalFeesColumn;

    @FXML
    private Label totalInvoicesLabel;

    @FXML
    private Label totalRevenueLabel;

    @FXML
    private Label paymentRateLabel;

    @FXML
    private Label overdueRateLabel;

    @FXML
    private Button printButton;

    @FXML
    private Button exportButton;

    @FXML
    private Button closeButton;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        // Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn UI
        initializeComponents();

        // Thi·∫øt l·∫≠p c√°c s·ª± ki·ªán
        setupEventHandlers();

        // T·∫£i d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
        loadDefaultData();


    }

    private void initializeComponents() {
        // Kh·ªüi t·∫°o DatePicker
        initializeDatePickers();

        // Kh·ªüi t·∫°o ComboBox
        initializeComboBoxes();

        // Kh·ªüi t·∫°o TableView
        initializeTableView();

        // Kh·ªüi t·∫°o bi·ªÉu ƒë·ªì
        initializeCharts();
    }

    private void initializeDatePickers() {
        // Thi·∫øt l·∫≠p gi√° tr·ªã m·∫∑c ƒë·ªãnh: t·ª´ ƒë·∫ßu th√°ng ƒë·∫øn hi·ªán t·∫°i
        LocalDate now = LocalDate.now();
        LocalDate firstDayOfMonth = LocalDate.of(now.getYear(), now.getMonth(), 1);
        fromDatePicker.setValue(firstDayOfMonth);
        toDatePicker.setValue(now);

    }

    private void initializeComboBoxes() {
        // TODO: Kh·ªüi t·∫°o c√°c lo·∫°i b√°o c√°o cho reportTypeComboBox
        // V√≠ d·ª•: B√°o c√°o theo th√°ng, theo qu√Ω, theo nƒÉm
        reportTypeComboBox.getItems().addAll("B√°o c√°o theo th√°ng", "B√°o c√°o theo qu√Ω", "B√°o c√°o theo nƒÉm");
    }

    private void initializeTableView() {
        // TODO: C·∫•u h√¨nh TableView v√† c√°c c·ªôt

    }

    private void initializeCharts() {
        // TODO: C·∫•u h√¨nh bi·ªÉu ƒë·ªì bar chart v√† pie chart

    }

    private void setupEventHandlers() {
        // X·ª≠ l√Ω s·ª± ki·ªán t·∫°o b√°o c√°o
        generateButton.setOnAction(event -> {
            try {
                generateReport();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        });

        // X·ª≠ l√Ω s·ª± ki·ªán xu·∫•t b√°o c√°o
        exportReportButton.setOnAction(event -> exportFullReport());

        // X·ª≠ l√Ω s·ª± ki·ªán in b√°o c√°o
        printButton.setOnAction(event -> printReport());

        // X·ª≠ l√Ω s·ª± ki·ªán xu·∫•t Excel
        exportButton.setOnAction(event -> exportToExcel());

        // N√∫t ƒë√≥ng m·∫∑c ƒë·ªãnh kh√¥ng l√†m g√¨ - s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi DashboardController
    }

    private void loadDefaultData() {
        // TODO: T·∫£i d·ªØ li·ªáu b√°o c√°o m·∫∑c ƒë·ªãnh

        // Hi·ªÉn th·ªã d·ªØ li·ªáu t√≥m t·∫Øt
        updateSummaryData();
    }

    private void generateReport() throws SQLException {
        // TODO: T·∫°o b√°o c√°o d·ª±a tr√™n lo·∫°i b√°o c√°o v√† kho·∫£ng th·ªùi gian ƒë√£ ch·ªçn

        // C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì
        updateCharts();

        // C·∫≠p nh·∫≠t b·∫£ng d·ªØ li·ªáu
        updateTableData();

        // C·∫≠p nh·∫≠t d·ªØ li·ªáu t√≥m t·∫Øt
        updateSummaryData();
    }

    private void updateCharts() throws SQLException {
        // TODO: C·∫≠p nh·∫≠t d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì doanh thu v√† bi·ªÉu ƒë·ªì tr·∫°ng th√°i
        LocalDate fromDate = fromDatePicker.getValue();
        LocalDate toDate = toDatePicker.getValue();
        ObservableList<XYChart.Data<String, Number>> data = new ReportDAO().getValue(fromDate, toDate);

        XYChart.Series<String, Number> series = new XYChart.Series<>();
        series.setName("Doanh thu theo th√°ng");
        series.setData(data);

        CategoryAxis xAxis = (CategoryAxis) revenueChart.getXAxis();
        xAxis.setTickLabelRotation(-45); // Xoay label 45 ƒë·ªô nh√¨n g·ªçn
// KH√îNG c·∫ßn setTickLabelGap ·ªü ƒë√¢y, v√¨ kh√¥ng gi√∫p c√°ch c·ªôt

        revenueChart.getData().clear();
        revenueChart.getData().add(series);

// Ch√≠nh x√°c ·ªü ƒë√¢y n√®
        revenueChart.setCategoryGap(100); // üëà c√°i n√†y gi√∫p c√°c th√°ng (c√°c c·ªôt) c√°ch xa nhau theo tr·ª•c ngang
        revenueChart.setBarGap(10);        // n·∫øu sau n√†y c√≥ nhi·ªÅu c·ªôt trong c√πng 1 th√°ng th√¨ m·ªói c·ªôt c≈©ng c√°ch nhau

    }

    private void updateTableData() throws SQLException {
        // TODO: C·∫≠p nh·∫≠t d·ªØ li·ªáu cho b·∫£ng b√°o c√°o
        LocalDate fromDate = fromDatePicker.getValue();
        LocalDate toDate = toDatePicker.getValue();
        periodColumn.setCellValueFactory(new MapValueFactory<>("k·ª≥"));
        totalInvoicesColumn.setCellValueFactory(new MapValueFactory<>("t·ªïng s·ªë h√≥a ƒë∆°n"));
        overdueInvoicesColumn.setCellValueFactory(new MapValueFactory<>("qu√° h·∫°n"));
        paidInvoicesColumn.setCellValueFactory(new MapValueFactory<>("ƒë√£ thanh to√°n"));
        totalFeesColumn.setCellValueFactory(new MapValueFactory<>("t·ªïng ph√≠ ph·∫°t"));
        unpaidInvoicesColumn.setCellValueFactory(new MapValueFactory<>("ch∆∞a thanh to√°n"));
        reportTable.setItems(new ReportDAO().getValueReport(fromDate, toDate));
        totalRevenueColumn.setCellValueFactory(new MapValueFactory<>("t·ªïng doanh thu"));
    }

    private void updateSummaryData() {
        // TODO: C·∫≠p nh·∫≠t c√°c th√¥ng tin t√≥m t·∫Øt
        // Gi·∫£ s·ª≠ c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh
        totalInvoicesLabel.setText("0");
        totalRevenueLabel.setText("0 VNƒê");
        paymentRateLabel.setText("0%");
        overdueRateLabel.setText("0%");
    }

    private void exportFullReport() {
        // TODO: Xu·∫•t to√†n b·ªô b√°o c√°o (bao g·ªìm bi·ªÉu ƒë·ªì, b·∫£ng d·ªØ li·ªáu v√† t√≥m t·∫Øt)
    }

    private void printReport() {
        // TODO: In b√°o c√°o
    }

    private void exportToExcel() {
        // TODO: Xu·∫•t b√°o c√°o d·∫°ng Excel
    }

    // Getter cho n√∫t ƒë√≥ng ƒë·ªÉ DashboardController c√≥ th·ªÉ truy c·∫≠p
    public Button getCloseButton() {
        return closeButton;
    }
}